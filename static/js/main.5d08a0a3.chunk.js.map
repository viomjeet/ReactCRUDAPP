{"version":3,"sources":["component/viewusers.js","component/adduser.js","component/edituser.js","App.js","serviceWorker.js","index.js"],"names":["Viewusers","props","className","style","width","items","map","index","key","name","email","onClick","editUser","type","deleteUser","Adduser","onSubmit","nUISubmit","value","onChange","nUIChange","required","placeholder","resetForm","message","success","error","Edituser","eUISubmit","autoComplete","eUIChange","CloseForm","App","React","Component","constructor","super","e","this","setState","userEdit","id","allUser","state","filter","item","nUSr","newUser","target","preventDefault","cUSr","length","some","push","eUSr","edituser","alluser","i","eml","indexOf","xPan","componentDidMount","setInterval","render","Fragment","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d08a0a3.chunk.js","sourcesContent":["import React from 'react';\r\nconst Viewusers = (props) => {\r\n\r\n    return (\r\n        <div className=\"table-responsive\">\r\n            <table className=\"table table-bordered table-sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{ width: \"40%\" }}>Name</th>\r\n                        <th style={{ width: \"40%\" }}>Email</th>\r\n                        <th style={{ width: \"20%\" }}>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.items.map((items, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{items.name}</td>\r\n                                <td>{items.email}</td>\r\n                                <td>\r\n                                    <div className=\"btn-group\">\r\n                                        <button className=\"btn btn-primary btn-sm\"\r\n                                            onClick={() => props.editUser(items)}\r\n                                            type=\"button\">Edit</button>\r\n\r\n                                        <button\r\n                                            className=\"btn btn-warning btn-sm\"\r\n                                            onClick={() => props.deleteUser(items.email)}\r\n                                            type=\"button\">Delete</button>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>)\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default Viewusers;","import React from 'react';\r\n\r\nconst Adduser = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <h4>Add User</h4>\r\n                <hr />\r\n                <form onSubmit={props.nUISubmit}>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" className=\"form-control\"\r\n                            name='name'\r\n                            value={props.items.name}\r\n                            onChange={props.nUIChange}\r\n                            required\r\n                            placeholder=\"Name...\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"email\" className=\"form-control\"\r\n                            name='email'\r\n                            value={props.items.email}\r\n                            onChange={props.nUIChange}\r\n                            required\r\n                            placeholder=\"Email...\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <hr />\r\n                        <div className=\"btn-group\">\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n                            <button className=\"btn btn-warning\" onClick={props.resetForm} type=\"reset\">Reset</button>\r\n                        </div>\r\n                        &nbsp; <b className=\"text-success\">{props.message.success}</b>\r\n                        <b className=\"text-danger\">{props.message.error}</b>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Adduser;\r\n","import React from 'react';\r\n\r\nconst Edituser = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <h4>Edit User</h4>\r\n                <hr />\r\n                <form onSubmit={props.eUISubmit} autoComplete=\"off\">\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" className=\"form-control\"\r\n                            name='name'\r\n                            value={props.items.name}\r\n                            onChange={props.eUIChange}\r\n                            required\r\n                            placeholder=\"Name...\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"email\" className=\"form-control\"\r\n                            name='email'\r\n                            value={props.items.email}\r\n                            onChange={props.eUIChange}\r\n                            required\r\n                            placeholder=\"Email...\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <hr />\r\n                        <div className=\"btn-group\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Save</button>\r\n                        <button className=\"btn btn-warning\" onClick={props.CloseForm} type=\"button\">Close</button>\r\n                        </div>\r\n                        &nbsp; <b className=\"text-success\">{props.message.success}</b>\r\n                        <b className=\"text-danger\">{props.message.error}</b>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edituser;\r\n","import React from 'react';\nimport './css/style.css';\nimport Viewusers from './component/viewusers'\nimport Adduser from './component/adduser'\nimport Edituser from './component/edituser'\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      allUser: [{ id: 1, name: \"user1\", email: \"user1@example.com\" }, { id: 2, name: \"user2\", email: \"user2@example.com\" }],\n      newUser: { name: '', email: '' },\n      editUser: { id: '', name: '', email: '' },\n      message: { success: '', error: '' },\n      userEdit: false\n    }\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({ message: { error: '', success: '' } })\n    }, 2500)\n  }\n  editUser = e => {\n    this.setState({ userEdit: true });\n    this.setState({ editUser: { id: e.id, name: e.name, email: e.email } });\n  }\n  deleteUser = e => {\n    this.setState({ allUser: this.state.allUser.filter(item => item.email !== e) })\n  }\n  nUIChange = e => {\n    let nUSr = this.state.newUser;\n    nUSr[e.target.name] = e.target.value;\n    this.setState({ newUser: nUSr });\n  }\n  nUISubmit = e => {\n    e.preventDefault();\n    let cUSr = this.state.allUser;\n    let nUSr = this.state.newUser;\n    let id = cUSr.length + 1\n    nUSr['id'] = id;\n    let x = cUSr.some(item => item.email === nUSr.email);\n    if (x) {\n      this.setState({ message: { error: \"Email Already exist\" } })\n    } else {\n      cUSr.push(nUSr);\n      this.setState({ nUSr });\n      this.setState({ message: { success: \"Saved\" } })\n      this.setState({ newUser: { name: '', email: '' } });\n    }\n  }\n  eUIChange = e => {\n    let eUSr = this.state.editUser;\n    eUSr[e.target.name] = e.target.value;\n    this.setState({ editUser: eUSr });\n  }\n  eUISubmit = e => {\n    e.preventDefault();\n    let edituser = this.state.editUser;\n    let alluser = this.state.allUser;\n    let i = alluser.map(eml => eml.id).indexOf(edituser.id);\n    let xPan = alluser[i] = edituser;\n    this.setState({ xPan });\n    this.setState({ userEdit: false })\n  }\n  resetForm = e => {\n    this.setState({ newUser: { name: '', email: '' } });\n  }\n  CloseForm = e => {\n    this.setState({ userEdit: false });\n  }\n  render() {\n    const allUser = this.state.allUser;\n    const newUser = this.state.newUser;\n    const editUser = this.state.editUser;\n    const message = this.state.message;\n    const userEdit = this.state.userEdit;\n    return (\n      <React.Fragment>\n        <header>\n          <div className=\"container\">\n            <h5>React CRUD APP</h5>\n          </div>\n        </header>\n        <div className=\"container\">\n          {userEdit ?\n            <Edituser items={editUser} eUIChange={this.eUIChange} eUISubmit={this.eUISubmit} message={message} CloseForm={this.CloseForm} /> :\n            <Adduser items={newUser} nUIChange={this.nUIChange} nUISubmit={this.nUISubmit} resetForm={this.resetForm} message={message} />}\n          <Viewusers items={allUser} deleteUser={this.deleteUser} editUser={this.editUser} />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}